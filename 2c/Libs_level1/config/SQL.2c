//ЗапросSQL

#define Пусто0	""
#define Пусто	"''"

Перем СтруктураЗапроса;
//___________________________________________________________________________________________
Функция ВыполнитьЗапрос(Структура)Экспорт
	СтруктураЗапроса=Структура;
	
	ЧислоГруппировок=РазмерСтруктуры(СтруктураЗапроса.Группировки);
	ЧислоФункций=РазмерСтруктуры(СтруктураЗапроса.Функции);
	Если ЧислоФункций=0 Тогда
		//Ошибка("Не задана ни одна функция");
	КонецЕсли
	
	//создаем список таблиц используемых объектов (с учетом формулы тип+вид)
	СписокОбъектов=СоздатьОбъект("Структура");
	Для А=1 По РазмерСтруктуры(СтруктураЗапроса.Переменные) Цикл
		Имя=СтруктураЗапроса.Переменные.ИдентификаторПоНомеру(А);
		ТипВид=СтруктураЗапроса.Переменные[Имя].Тип+"."+СтруктураЗапроса.Переменные[Имя].Вид;
		Если СписокОбъектов.НайтиИдентификатор(ТипВид)=0 Тогда
			СписокОбъектов[ТипВид]=СоздатьОбъект(ТипВид);
		КонецЕсли
	КонецЦикла
	
	Префикс="TempQ_"+_GetPerformanceCounter()+"_";//уникальный префикс для временных таблиц//ИмяКомпьютера()
	
	//Создаем строку выборки запроса по каждой таблице:
	Для А=1 По РазмерСтруктуры(СписокОбъектов) Цикл
		ТипВид=СписокОбъектов.ИдентификаторПоНомеру(А);
		Объект=СписокОбъектов[ТипВид];
		ИмяТаблицы=Объект.ИмяТаблицыОбъекта()
	
		//1. Сначала группировки
		СтрГрупп="";
		СтрСинонимГрупп="";
		Для А=1 По ЧислоГруппировок Цикл
			Имя=СтруктураЗапроса.Группировки.ИдентификаторПоНомеру(А);
			ПолеБД=Объект.ПолучитьИмяПоляБД(СтруктураЗапроса.Переменные[Имя].Реквизит);
			Если ТипВид=СтруктураЗапроса.Переменные[Имя].Тип+"."+СтруктураЗапроса.Переменные[Имя].Вид Тогда
				СтрГрупп=СтрГрупп+","+ПолеБД;
				СтрСинонимГрупп=СтрСинонимГрупп+","+ПолеБД+" AS "+Имя;
				//расширяем структуру
				СтруктураЗапроса.Группировки[Имя].Объект=Объект;
			Иначе
				СтрГрупп=СтрГрупп+","+Пусто;
				СтрСинонимГрупп=СтрСинонимГрупп+","+Пусто+" AS "+Имя;
			КонецЕсли
		КонецЦикла
		СтрГрупп=Сред(СтрГрупп,2);//убираем лишнюю запятую слева
		СтрСинонимГрупп=Сред(СтрСинонимГрупп,2);
		
		//2. Переменные
		
		//3. Функции
		//Период
		СтрУсловияПериода="";
		СтрУсловияПериодаAND="";
		ЕстьПолеДаты=ЕстьПолеПериодаДвиженияБД(Объект);
		Если ЕстьПолеДаты=1 Тогда
			ИмяПоляДаты=Объект.ПолучитьПолеВременногоПозицианирования();
			ПолеБДДаты=Объект.ПолучитьИмяПоляБД(ИмяПоляДаты);
			//ЗнДаты1=Объект.СтрИзЗначения(ИмяПоляДаты,СтруктураЗапроса.НачДата);
			//ЗнДаты2=Объект.СтрИзЗначения(ИмяПоляДаты,СтруктураЗапроса.КонДата);
			ЗнДаты1=ДатаВСтроку(СтруктураЗапроса.НачДата,0);
			ЗнДаты2=ДатаВСтроку(СтруктураЗапроса.КонДата,999999);
			СтрУсловияПериода="("+ПолеБДДаты+">="+ЗнДаты1+" AND "+ПолеБДДаты+"<="+ЗнДаты2+")";
			СтрУсловияПериодаAND=" AND "+СтрУсловияПериода;
		КонецЕсли
		ЕстьФункцииОстатки=0;
		
		СтрФункций="";
		Для А=1 По ЧислоФункций Цикл
			Имя=СтруктураЗапроса.Функции.ИдентификаторПоНомеру(А);
			ТипФункции=СтруктураЗапроса.Функции[Имя].Тип;
			Если ВРЕГ(ТипФункции)="СЧЕТЧИК" Тогда
				СтрФункций=СтрФункций+",COUNT(*) AS "+Имя;
				Продолжить;
			КонецЕсли
				
			
			Переменная=СтруктураЗапроса.Функции[Имя].Переменная;
			ПолеБД=Объект.ПолучитьИмяПоляБД(СтруктураЗапроса.Переменные[Переменная].Реквизит);
			Если ТипВид<>СтруктураЗапроса.Переменные[Переменная].Тип+"."+СтруктураЗапроса.Переменные[Переменная].Вид Тогда
				ПолеБД=0;
			КонецЕсли
			Если ВРЕГ(ТипФункции)="СУММА" Тогда
				ФормулаФункции=ПолеБД;
			ИначеЕсли ВРЕГ(ТипФункции)="МАКСИМУМ" Тогда
				СтрФункций=СтрФункций+",MAX("+ПолеБД+") AS "+Имя;
				Продолжить;
			ИначеЕсли ВРЕГ(ТипФункции)="МИНИМУМ" Тогда
				СтрФункций=СтрФункций+",MIN("+ПолеБД+") AS "+Имя;
				Продолжить;
			ИначеЕсли ВРЕГ(ТипФункции)="ПРИХОД" Тогда
				Если ЕстьПолеДаты=1 Тогда
					ТипДв=ПолучитьПолеТипаДвиженияБД(Объект);
					ФормулаФункции="CASE WHEN "+ТипДв+"='+' "+СтрУсловияПериодаAND+" THEN "+ПолеБД+" ELSE 0 END";
				Иначе
					ФормулаФункции="0";
				КонецЕсли
			ИначеЕсли ВРЕГ(ТипФункции)="РАСХОД" Тогда
				Если ЕстьПолеДаты=1 Тогда
					ТипДв=ПолучитьПолеТипаДвиженияБД(Объект);
					ФормулаФункции="CASE WHEN "+ТипДв+"='-' "+СтрУсловияПериодаAND+" THEN "+ПолеБД+" ELSE 0 END";
				Иначе
					ФормулаФункции="0";
				КонецЕсли
			ИначеЕсли ВРЕГ(ТипФункции)="НАЧОСТ" Тогда
				Если ЕстьПолеДаты=1 Тогда
					ЕстьФункцииОстатки=1;
					ТипДв=ПолучитьПолеТипаДвиженияБД(Объект);
					ПолеБДДаты=ПолучитьПолеВременногоПозицианированияБД(Объект);
					//ЗнДаты=Объект.СтрИзЗначения(ИмяПоляДаты,СтруктураЗапроса.НачДата);
					ЗнДаты=ДатаВСтроку(СтруктураЗапроса.НачДата);
					ФормулаФункции="CASE WHEN "+ПолеБДДаты+">="+ЗнДаты+" THEN 0 ELSE CASE WHEN "+ТипДв+"='-' THEN -"+ПолеБД+" ELSE "+ПолеБД+" END END";
				Иначе
					ФормулаФункции="0";
				КонецЕсли
			ИначеЕсли ВРЕГ(ТипФункции)="КОНОСТ" Тогда
				Если ЕстьПолеДаты=1 Тогда
					ЕстьФункцииОстатки=1;
					ТипДв=ПолучитьПолеТипаДвиженияБД(Объект);
					ФормулаФункции="CASE WHEN "+ТипДв+"='-' THEN -"+ПолеБД+" ELSE "+ПолеБД+" END";
				Иначе
					ФормулаФункции="0";
				КонецЕсли
			Иначе
				Ошибка("Нераспознанный тип внутренней функции - "+ТипФункции);
			КонецЕсли
			
			СтрФункций=СтрФункций+",SUM("+ФормулаФункции+") AS "+Имя;
			
		КонецЦикла
		//СтрФункций=Сред(СтрФункций,2);//убираем лишнюю запятую слева
		СтрФункций=СокрЛ(СтрФункций,",");//убираем лишнюю запятую слева
		
		СтрВыборки="";
		Группировка="";
		Если Сокрлп(СтрГрупп)="" Тогда
			СтрВыборки=СтрФункций;
		Иначе
			Группировка=" GROUP BY "+СтрГрупп;
			СтрВыборки=СтрСинонимГрупп+","+СтрФункций;
		КонецЕсли
		СтрВыборки=СокрП(СтрВыборки,",");//убираем лишнюю запятую справа (если есть)

		//4. Условия
		СтрУсловия="";
		//Период
		Если ЕстьФункцииОстатки=1 Тогда//изменяем условие периода на ограничение только сверху
			СтрУсловияПериода="";
			Если ЕстьПолеДаты=1 Тогда
				ПолеБДДаты=ПолучитьПолеВременногоПозицианированияБД(Объект);
				//ЗнДаты=Объект.СтрИзЗначения(ИмяПоляДаты,СтруктураЗапроса.КонДата);
				ЗнДаты=ДатаВСтроку(СтруктураЗапроса.КонДата,999999);
				СтрУсловияПериода="("+ПолеБДДаты+"<="+ЗнДаты+")";
			КонецЕсли
		КонецЕсли
		//условия пользователя
		СтрУсловияПользователя="";
		Для А=1 По РазмерМассива(СтруктураЗапроса.Условия) Цикл
			Переменная=СтруктураЗапроса.Условия[А].Переменная;
			Реквизит=СтруктураЗапроса.Переменные[Переменная].Реквизит;
			ПолеБД=Объект.ПолучитьИмяПоляБД(Реквизит);
			Оператор=СтруктураЗапроса.Условия[А].Оператор;
			Значение=Объект.СтрИзЗначения(Реквизит,СтруктураЗапроса.Условия[А].Значение);
			
			СтрУсловияПользователя=СтрУсловияПользователя+" AND ("+ПолеБД+" "+Оператор+" "+Значение+")";
		КонецЦикла


		Если Сокрлп(СтрУсловияПериода)="" Тогда
			СтрУсловия=Сред(СтрУсловияПользователя,5);
		Иначе
			СтрУсловия=СтрУсловияПериода+СтрУсловияПользователя;
		КонецЕсли
		
		Если Сокрлп(СтрУсловия)<>"" Тогда
			 СтрУсловия=" WHERE "+СтрУсловия;
		КонецЕсли
		


		СтрЗапроса="SELECT "+СтрВыборки+" FROM "+ИмяТаблицы+СтрУсловия+Группировка;
		
		//пока так...
		Запрос=СоздатьОбъект("БазаДанных"); 
		Запрос.Запрос(СтрЗапроса);
		Возврат Запрос;
	КонецЦикла
	
КонецФункции

//___________________________________________________________________________________________
Функция ПолучитьПолеТипаДвиженияБД(Объект)
	Перем Имя;
	Попытка
	Имя=Объект.ПолучитьПолеТипаДвижения();
	Исключение
	КонецПопытки
	
	Если ПустоеЗначение(Имя)=1 Тогда
		Ошибка("Объект """+ТипЗначенияСтр(Объект)+""" не поддерживает функции типа Приход/Расход");
	КонецЕсли
	
	Поле=Сокрлп(Объект.ПолучитьИмяПоляБД(Имя));
	Возврат Поле;
КонецФункции
//___________________________________________________________________________________________
Функция ПолучитьПолеВременногоПозицианированияБД(Объект)
	Перем Имя;
	Попытка
	Имя=Объект.ПолучитьПолеВременногоПозицианирования();
	Исключение
	КонецПопытки
	
	Если ПустоеЗначение(Имя)=1 Тогда
		Ошибка("Объект """+ТипЗначенияСтр(Объект)+""" не поддерживает задание периода");
	КонецЕсли
	
	Поле=Сокрлп(Объект.ПолучитьИмяПоляБД(Имя));
	Возврат Поле;
КонецФункции

//___________________________________________________________________________________________
Функция ЕстьПолеПериодаДвиженияБД(Объект)
	Перем Имя;
	Попытка
	Имя=Объект.ПолучитьПолеВременногоПозицианирования();
	Исключение
	КонецПопытки

	Возврат 1-ПустоеЗначение(Имя);
КонецФункции
